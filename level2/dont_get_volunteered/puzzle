This puzzle is called "Don't Get Volunteered."

Label the squares of a chessboard 0 to 63 as so:

-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------

Define a function answer(src, dest) that takes a starting location src and a final location dest.  The function returns a nonnegative integer that is equal to the minimum number of moves necessary to move a knight from src to dest.

My solution is in solution.py.  The solution is just a breadth-first search.  I wonder if there is a way to solve this problem exploiting invariants, group theory, or some other elegant mathematical structure.